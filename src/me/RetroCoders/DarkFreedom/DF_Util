package me.RetroCoders.DarkFreedom;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.Server;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;

public class DF_Util
{
  public static ArrayList getAvailableWorlds()
  {
    ArrayList<World> availableWorlds = new ArrayList();
    for (World world : AvalancheFreedom.server.getWorlds()) {
      if (((!world.getName().equals("adminworld")) && (!world.getName().contains("nether"))) || (!world.getName().contains("end"))) {
        availableWorlds.add(world);
      }
    }
    return availableWorlds;
  }
  
  public static boolean isSuperAdmin(Player player)
  {
    return SuperAdmins.isUserSuperadmin(player);
  }
  
  public static String getPlayerIP(Player player)
  {
    return player.getAddress().getAddress().getHostAddress();
  }
  
  public static enum blockPlaceType
  {
    FLOOR,  WALL,  CUBE;
    
    private blockPlaceType() {}
  }
  
  public static void placeBlocks(Player player, Material material, blockPlaceType placeType, int width, int height, boolean set)
  {
    switch (1.$SwitchMap$net$Avalanche$AVFreedom$AV_Util$blockPlaceType[placeType.ordinal()])
    {
    case 1: 
      for (int x = 0; x < width; x++) {
        for (int z = 0; z < width; z++)
        {
          Location location = player.getLocation();
          location.setX(location.getX() + x);
          location.setZ(location.getZ() + z);
          if (!set)
          {
            if (location.getWorld().getBlockAt(location).getType() == Material.AIR) {
              location.getWorld().getBlockAt(location).setType(material);
            }
          }
          else {
            location.getWorld().getBlockAt(location).setType(material);
          }
        }
      }
      break;
    case 2: 
      for (int x = 0; x < width; x++) {
        for (int y = 0; y < height; y++)
        {
          Location location = player.getLocation();
          location.setX(location.getX() + x);
          location.setY(location.getY() + y);
          if (!set)
          {
            if (location.getWorld().getBlockAt(location).getType() == Material.AIR) {
              location.getWorld().getBlockAt(location).setType(material);
            }
          }
          else {
            location.getWorld().getBlockAt(location).setType(material);
          }
        }
      }
      break;
    case 3: 
      for (int x = 0; x < width; x++) {
        for (int y = 0; y < height; y++) {
          for (int z = 0; z < width; z++)
          {
            Location location = player.getLocation();
            location.setX(location.getX() + x);
            location.setY(location.getY() + y);
            location.setZ(location.getZ() + z);
            if (!set)
            {
              if (location.getWorld().getBlockAt(location).getType() == Material.AIR) {
                location.getWorld().getBlockAt(location).setType(material);
              }
            }
            else {
              location.getWorld().getBlockAt(location).setType(material);
            }
          }
        }
      }
    }
  }
  
  public static boolean isNewPlayer(Player player)
  {
    OfflinePlayer[] offlinePlayers = AvalancheFreedom.server.getOfflinePlayers();
    boolean newPlayer = true;
    for (OfflinePlayer offlinePlayer : offlinePlayers) {
      if (offlinePlayer.getName().equals(player.getName())) {
        newPlayer = false;
      }
    }
    return newPlayer;
  }
  
  public static String getStringWithoutNumbers(String s)
  {
    String finalStr = s;
    for (int i = 0; i < 10; i++) {
      finalStr = finalStr.replaceAll("" + i, "");
    }
    return finalStr;
  }
  
  public static void setConfig(FileConfiguration config)
  {
    config.addDefault("admin_world_enabled", Boolean.valueOf(true));
  }
}
